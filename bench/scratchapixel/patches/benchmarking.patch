diff --git a/rasterization-practical-implementation/CMakeLists.txt b/rasterization-practical-implementation/CMakeLists.txt
new file mode 100644
index 0000000..a967116
--- /dev/null
+++ b/rasterization-practical-implementation/CMakeLists.txt
@@ -0,0 +1,3 @@
+cmake_minimum_required(VERSION 3.13)
+project(rasterization)
+add_executable(raster3d raster3d.cpp)
diff --git a/rasterization-practical-implementation/geometry.h b/rasterization-practical-implementation/geometry.h
index 471d0d1..a477ffd 100644
--- a/rasterization-practical-implementation/geometry.h
+++ b/rasterization-practical-implementation/geometry.h
@@ -33,6 +33,7 @@
 #include <iostream>
 #include <iomanip>
 #include <cmath>
+#include <cstdint>
 
 template<typename T>
 class Vec2
@@ -117,7 +118,7 @@ public:
             T factor = 1 / sqrt(n);
             x *= factor, y *= factor, z *= factor;
         }
-        
+
         return *this;
     }
 
@@ -130,7 +131,7 @@ public:
     {
         return s << '[' << v.x << ' ' << v.y << ' ' << v.z << ']';
     }
-    
+
     T x, y, z;
 };
 
@@ -178,7 +179,7 @@ public:
         x[3][2] = o;
         x[3][3] = p;
     }
-    
+
     const T* operator [] (uint8_t i) const { return x[i]; }
     T* operator [] (uint8_t i) { return x[i]; }
 
@@ -220,51 +221,51 @@ public:
         const T * __restrict ap = &a.x[0][0];
         const T * __restrict bp = &b.x[0][0];
               T * __restrict cp = &c.x[0][0];
-        
+
         T a0, a1, a2, a3;
-        
+
         a0 = ap[0];
         a1 = ap[1];
         a2 = ap[2];
         a3 = ap[3];
-        
+
         cp[0]  = a0 * bp[0]  + a1 * bp[4]  + a2 * bp[8]  + a3 * bp[12];
         cp[1]  = a0 * bp[1]  + a1 * bp[5]  + a2 * bp[9]  + a3 * bp[13];
         cp[2]  = a0 * bp[2]  + a1 * bp[6]  + a2 * bp[10] + a3 * bp[14];
         cp[3]  = a0 * bp[3]  + a1 * bp[7]  + a2 * bp[11] + a3 * bp[15];
-        
+
         a0 = ap[4];
         a1 = ap[5];
         a2 = ap[6];
         a3 = ap[7];
-        
+
         cp[4]  = a0 * bp[0]  + a1 * bp[4]  + a2 * bp[8]  + a3 * bp[12];
         cp[5]  = a0 * bp[1]  + a1 * bp[5]  + a2 * bp[9]  + a3 * bp[13];
         cp[6]  = a0 * bp[2]  + a1 * bp[6]  + a2 * bp[10] + a3 * bp[14];
         cp[7]  = a0 * bp[3]  + a1 * bp[7]  + a2 * bp[11] + a3 * bp[15];
-        
+
         a0 = ap[8];
         a1 = ap[9];
         a2 = ap[10];
         a3 = ap[11];
-        
+
         cp[8]  = a0 * bp[0]  + a1 * bp[4]  + a2 * bp[8]  + a3 * bp[12];
         cp[9]  = a0 * bp[1]  + a1 * bp[5]  + a2 * bp[9]  + a3 * bp[13];
         cp[10] = a0 * bp[2]  + a1 * bp[6]  + a2 * bp[10] + a3 * bp[14];
         cp[11] = a0 * bp[3]  + a1 * bp[7]  + a2 * bp[11] + a3 * bp[15];
-        
+
         a0 = ap[12];
         a1 = ap[13];
         a2 = ap[14];
         a3 = ap[15];
-        
+
         cp[12] = a0 * bp[0]  + a1 * bp[4]  + a2 * bp[8]  + a3 * bp[12];
         cp[13] = a0 * bp[1]  + a1 * bp[5]  + a2 * bp[9]  + a3 * bp[13];
         cp[14] = a0 * bp[2]  + a1 * bp[6]  + a2 * bp[10] + a3 * bp[14];
         cp[15] = a0 * bp[3]  + a1 * bp[7]  + a2 * bp[11] + a3 * bp[15];
 #endif
     }
-    
+
     // \brief return a transposed copy of the current matrix as a new matrix
     Matrix44 transposed() const
     {
@@ -338,12 +339,12 @@ public:
     void multVecMatrix(const Vec3<S> &src, Vec3<S> &dst) const
     {
         S a, b, c, w;
-        
+
         a = src[0] * x[0][0] + src[1] * x[1][0] + src[2] * x[2][0] + x[3][0];
         b = src[0] * x[0][1] + src[1] * x[1][1] + src[2] * x[2][1] + x[3][1];
         c = src[0] * x[0][2] + src[1] * x[1][2] + src[2] * x[2][2] + x[3][2];
         w = src[0] * x[0][3] + src[1] * x[1][3] + src[2] * x[2][3] + x[3][3];
-        
+
         dst.x = a / w;
         dst.y = b / w;
         dst.z = c / w;
@@ -359,11 +360,11 @@ public:
     void multDirMatrix(const Vec3<S> &src, Vec3<S> &dst) const
     {
         S a, b, c;
-        
+
         a = src[0] * x[0][0] + src[1] * x[1][0] + src[2] * x[2][0];
         b = src[0] * x[0][1] + src[1] * x[1][1] + src[2] * x[2][1];
         c = src[0] * x[0][2] + src[1] * x[1][2] + src[2] * x[2][2];
-        
+
         dst.x = a;
         dst.y = b;
         dst.z = c;
@@ -383,81 +384,81 @@ public:
         int i, j, k;
         Matrix44 s;
         Matrix44 t (*this);
-        
+
         // Forward elimination
         for (i = 0; i < 3 ; i++) {
             int pivot = i;
-            
+
             T pivotsize = t[i][i];
-            
+
             if (pivotsize < 0)
                 pivotsize = -pivotsize;
-                
+
                 for (j = i + 1; j < 4; j++) {
                     T tmp = t[j][i];
-                    
+
                     if (tmp < 0)
                         tmp = -tmp;
-                        
+
                         if (tmp > pivotsize) {
                             pivot = j;
                             pivotsize = tmp;
                         }
                 }
-            
+
             if (pivotsize == 0) {
                 // Cannot invert singular matrix
                 return Matrix44();
             }
-            
+
             if (pivot != i) {
                 for (j = 0; j < 4; j++) {
                     T tmp;
-                    
+
                     tmp = t[i][j];
                     t[i][j] = t[pivot][j];
                     t[pivot][j] = tmp;
-                    
+
                     tmp = s[i][j];
                     s[i][j] = s[pivot][j];
                     s[pivot][j] = tmp;
                 }
             }
-            
+
             for (j = i + 1; j < 4; j++) {
                 T f = t[j][i] / t[i][i];
-                
+
                 for (k = 0; k < 4; k++) {
                     t[j][k] -= f * t[i][k];
                     s[j][k] -= f * s[i][k];
                 }
             }
         }
-        
+
         // Backward substitution
         for (i = 3; i >= 0; --i) {
             T f;
-            
+
             if ((f = t[i][i]) == 0) {
                 // Cannot invert singular matrix
                 return Matrix44();
             }
-            
+
             for (j = 0; j < 4; j++) {
                 t[i][j] /= f;
                 s[i][j] /= f;
             }
-            
+
             for (j = 0; j < i; j++) {
                 f = t[j][i];
-                
+
                 for (k = 0; k < 4; k++) {
                     t[j][k] -= f * t[i][k];
                     s[j][k] -= f * s[i][k];
                 }
             }
         }
-        
+
         return s;
     }
 
@@ -474,27 +475,27 @@ public:
         int width = 12; // total with of the displayed number
         s.precision(5); // control the number of displayed decimals
         s.setf (std::ios_base::fixed);
-        
+
         s << "[" << std::setw (width) << m[0][0] <<
              " " << std::setw (width) << m[0][1] <<
              " " << std::setw (width) << m[0][2] <<
              " " << std::setw (width) << m[0][3] << "\n" <<
-            
+
              " " << std::setw (width) << m[1][0] <<
              " " << std::setw (width) << m[1][1] <<
              " " << std::setw (width) << m[1][2] <<
              " " << std::setw (width) << m[1][3] << "\n" <<
-            
+
              " " << std::setw (width) << m[2][0] <<
              " " << std::setw (width) << m[2][1] <<
              " " << std::setw (width) << m[2][2] <<
              " " << std::setw (width) << m[2][3] << "\n" <<
-            
+
              " " << std::setw (width) << m[3][0] <<
              " " << std::setw (width) << m[3][1] <<
              " " << std::setw (width) << m[3][2] <<
              " " << std::setw (width) << m[3][3] << "]";
-        
+
         s.flags (oldFlags);
         return s;
     }
@@ -529,4 +530,4 @@ int main(int argc, char **argv)
 
     return 0;
 }
-#endif
\ No newline at end of file
+#endif
