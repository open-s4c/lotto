/*
 * Copyright (C) 2025 Huawei Technologies Co., Ltd.
 * SPDX-License-Identifier: 0BSD
 */
#define $_mute() // fake definitions to make cland and co happy (not output)
#define $_dl()
#define $_map(...)
#define $_begin(...)
#define $_end(...)
#define $_returns
#define $__begin(...)
#define $__end(...)
#define $_include(...)
#define MM_RETURN_FOO int
#define MM_PARAMS_FOO
#define MAKE_UPCASE 1
#define PARAM       int x
#define AA          1
#define E_FOO(...)  1
#define E_FOO(...)  1
int FOO(int);
#define INCL       <stdio.h>
#define $_unmute() // end of fake definitions
$_dl(); // ---------------------------------------------------------------------
$_dl(); // mapping and tmplr configuration
$_dl(); // ---------------------------------------------------------------------
$_dl(); // MAKE_UPCASE can be used to force FOO to be upcased in EVENT_FOO
$_map(MAKE_UPCASE, $_upcase(EVENT_FOO));
$_dl(); // $_returns X $.? deletes line if X == "void", outputs nothing
$_dl(); // $_returns X $.!? deletes line if X == "void", otherwise outputs X
$_map($_returns void $, $_dl);
$_map($_returns, );
$_map($.?, $_undo);
$_map($.!?, );
$_dl(); // ---------------------------------------------------------------------
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#define DICE_TEST_INTERPOSE
#include <dice/chains/intercept.h>
#include <dice/ensure.h>
#include <dice/interpose.h>
#include <dice/pubsub.h>
$_begin(INCL = [[stdio.h]]);
#include INCL
$_end();

static void *symbol;
/* we need to declare this as noinline, otherwise the optimization of the
 * compiler gets rid of the symbol. */
static __attribute__((noinline)) void
enable(void *foo)
{
    symbol = foo;
}
static __attribute__((noinline)) void
disable(void)
{
    symbol = NULL;
}
static inline bool
enabled(void)
{
    return symbol != NULL;
}

void *
real_sym(const char *name, const char *ver)
{
    (void)ver;
    if (!enabled())
        return _real_sym(name, ver);
    return symbol;
}

$_begin(FOO = [[foo]]);
/* Expects struct to match this:
 *
 * struct FOO_event {
 *     $__begin(PPP = MM_PARAMS_FOO);
 *     PPP;
 *     $__end();
 *     $_returns MM_RETURN_FOO $.!? ret;
 * };
 */
struct FOO_event E_FOO;
$_end();

/* mock implementation of functions */
$_begin(FOO = [[foo]]);
MM_RETURN_FOO
fake_FOO(MM_PARAMS_FOO)
{
    /* check that every argument is as expected */
    $__begin(AA = MM_ARGS_FOO);
    ensure(AA == E_FOO.AA);
    $__end();
    /* return expected value */
    $_returns MM_RETURN_FOO $.? return E_FOO.ret;
}
$_end();

#define ASSERT_FIELD_EQ(E, field)                                              \
    ensure(memcmp(&ev->field, &(E)->field, sizeof(__typeof((E)->field))) == 0);

$_begin(FOO = [[foo]]);
PS_SUBSCRIBE(INTERCEPT_BEFORE, MAKE_UPCASE, {
    if (!enabled())
        return PS_STOP_CHAIN;
    struct FOO_event *ev = EVENT_PAYLOAD(ev);
    $__begin(AA = MM_ARGS_FOO);
    ASSERT_FIELD_EQ(&E_FOO, AA);
    $__end();
})

PS_SUBSCRIBE(INTERCEPT_AFTER, MAKE_UPCASE, {
    if (!enabled())
        return PS_STOP_CHAIN;
    struct FOO_event *ev = EVENT_PAYLOAD(ev);
    $__begin(AA = MM_ARGS_FOO);
    ASSERT_FIELD_EQ(&E_FOO, AA);
    $__end();
    $_returns MM_RETURN_FOO $.? ASSERT_FIELD_EQ(&E_FOO, ret);
})
$_end();


static void
event_init(void *ptr, size_t n)
{
    char *buf = ptr;
    for (size_t i = 0; i < n; i++)
        buf[i] = rand() % 256;
}

/* test case */

$_begin(FOO = [[foo]]);
static void
test_FOO(void)
{
    /* initialize event with random content */
    event_init(&E_FOO, sizeof(struct FOO_event));
    /* call FOO with arguments */
    enable(fake_FOO);
    $_returns MM_RETURN_FOO $.!? ret =                                   //
                                 FOO(                                    //
                                     $__begin(AA = MM_ARGS_FOO $__kill), //
                                     E_FOO.AA,                           //
                                     $__end(),                           //
                                 );
    $_returns MM_RETURN_FOO $.? ensure(ret == E_FOO.ret);
    disable();
}
$_end();

int
main()
{
    $_begin(FOO = [[foo]]);
    test_FOO();
    $_end();
    return 0;
}
